/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * NLW Connection
 * API para conectar o seu app com o nosso projeto
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../libs/api";
import type { ErrorType } from "../libs/api";
export type PostSubscriptionsBody = {
	name: string;
	email: string;
	/** @nullable */
	referral?: string | null;
};

export type PostSubscriptions201 = {
	subscriberId: string;
};

/**
 * @nullable
 */
export type GetInvitesSubscriberId302 =
	| (typeof GetInvitesSubscriberId302)[keyof typeof GetInvitesSubscriberId302]
	| null;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvitesSubscriberId302 = {
	null: "null",
} as const;

export type GetInvitesSubscriberIdRankingClicks200 = {
	count: number;
};

export type GetInvitesSubscriberIdRankingCount200 = {
	count: number;
};

export type GetInvitesSubscriberIdRankingPosition200 = {
	/** @nullable */
	position: number | null;
};

export type GetRanking200RankingItem = {
	id: string;
	name: string;
	score: number;
};

export type GetRanking200 = {
	ranking: GetRanking200RankingItem[];
};

/**
 * Inscreva-se em um evento.
 * @summary Inscreva-se em um evento.
 */
export const postSubscriptions = (
	postSubscriptionsBody: PostSubscriptionsBody,
	signal?: AbortSignal
) => {
	return customInstance<PostSubscriptions201>({
		url: "http://localhost:3333/subscriptions",
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: postSubscriptionsBody,
		signal,
	});
};

export const getPostSubscriptionsMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postSubscriptions>>,
		TError,
		{ data: PostSubscriptionsBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postSubscriptions>>,
	TError,
	{ data: PostSubscriptionsBody },
	TContext
> => {
	const mutationKey = ["postSubscriptions"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postSubscriptions>>,
		{ data: PostSubscriptionsBody }
	> = props => {
		const { data } = props ?? {};

		return postSubscriptions(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostSubscriptionsMutationResult = NonNullable<
	Awaited<ReturnType<typeof postSubscriptions>>
>;
export type PostSubscriptionsMutationBody = PostSubscriptionsBody;
export type PostSubscriptionsMutationError = ErrorType<unknown>;

/**
 * @summary Inscreva-se em um evento.
 */
export const usePostSubscriptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postSubscriptions>>,
		TError,
		{ data: PostSubscriptionsBody },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof postSubscriptions>>,
	TError,
	{ data: PostSubscriptionsBody },
	TContext
> => {
	const mutationOptions = getPostSubscriptionsMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * Acessar link de convite.
 * @summary Acessar link de convite.
 */
export const getInvitesSubscriberId = (
	subscriberId: string,
	signal?: AbortSignal
) => {
	return customInstance<unknown>({
		url: `http://localhost:3333/invites/${subscriberId}`,
		method: "GET",
		signal,
	});
};

export const getGetInvitesSubscriberIdQueryKey = (subscriberId: string) => {
	return [`http://localhost:3333/invites/${subscriberId}`] as const;
};

export const getGetInvitesSubscriberIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getInvitesSubscriberId>>,
	TError = ErrorType<GetInvitesSubscriberId302>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberId>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetInvitesSubscriberIdQueryKey(subscriberId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getInvitesSubscriberId>>
	> = ({ signal }) => getInvitesSubscriberId(subscriberId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!subscriberId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getInvitesSubscriberId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInvitesSubscriberIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInvitesSubscriberId>>
>;
export type GetInvitesSubscriberIdQueryError =
	ErrorType<GetInvitesSubscriberId302>;

export function useGetInvitesSubscriberId<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberId>>,
	TError = ErrorType<GetInvitesSubscriberId302>,
>(
	subscriberId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitesSubscriberId>>,
					TError,
					Awaited<ReturnType<typeof getInvitesSubscriberId>>
				>,
				"initialData"
			>;
	}
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInvitesSubscriberId<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberId>>,
	TError = ErrorType<GetInvitesSubscriberId302>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitesSubscriberId>>,
					TError,
					Awaited<ReturnType<typeof getInvitesSubscriberId>>
				>,
				"initialData"
			>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInvitesSubscriberId<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberId>>,
	TError = ErrorType<GetInvitesSubscriberId302>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberId>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Acessar link de convite.
 */

export function useGetInvitesSubscriberId<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberId>>,
	TError = ErrorType<GetInvitesSubscriberId302>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberId>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetInvitesSubscriberIdQueryOptions(
		subscriberId,
		options
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Acessar ranking de cliques do link de convite.
 * @summary Acessar ranking de cliques do link de convite.
 */
export const getInvitesSubscriberIdRankingClicks = (
	subscriberId: string,
	signal?: AbortSignal
) => {
	return customInstance<GetInvitesSubscriberIdRankingClicks200>({
		url: `http://localhost:3333/invites/${subscriberId}/ranking/clicks`,
		method: "GET",
		signal,
	});
};

export const getGetInvitesSubscriberIdRankingClicksQueryKey = (
	subscriberId: string
) => {
	return [
		`http://localhost:3333/invites/${subscriberId}/ranking/clicks`,
	] as const;
};

export const getGetInvitesSubscriberIdRankingClicksQueryOptions = <
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getGetInvitesSubscriberIdRankingClicksQueryKey(subscriberId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>
	> = ({ signal }) => getInvitesSubscriberIdRankingClicks(subscriberId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!subscriberId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInvitesSubscriberIdRankingClicksQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>
>;
export type GetInvitesSubscriberIdRankingClicksQueryError = ErrorType<unknown>;

export function useGetInvitesSubscriberIdRankingClicks<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
					TError,
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>
				>,
				"initialData"
			>;
	}
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInvitesSubscriberIdRankingClicks<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
					TError,
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>
				>,
				"initialData"
			>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInvitesSubscriberIdRankingClicks<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Acessar ranking de cliques do link de convite.
 */

export function useGetInvitesSubscriberIdRankingClicks<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingClicks>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetInvitesSubscriberIdRankingClicksQueryOptions(
		subscriberId,
		options
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Acessar contagem de convites do link de convite.
 * @summary Acessar contagem de convites do link de convite.
 */
export const getInvitesSubscriberIdRankingCount = (
	subscriberId: string,
	signal?: AbortSignal
) => {
	return customInstance<GetInvitesSubscriberIdRankingCount200>({
		url: `http://localhost:3333/invites/${subscriberId}/ranking/count`,
		method: "GET",
		signal,
	});
};

export const getGetInvitesSubscriberIdRankingCountQueryKey = (
	subscriberId: string
) => {
	return [
		`http://localhost:3333/invites/${subscriberId}/ranking/count`,
	] as const;
};

export const getGetInvitesSubscriberIdRankingCountQueryOptions = <
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getGetInvitesSubscriberIdRankingCountQueryKey(subscriberId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>
	> = ({ signal }) => getInvitesSubscriberIdRankingCount(subscriberId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!subscriberId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInvitesSubscriberIdRankingCountQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>
>;
export type GetInvitesSubscriberIdRankingCountQueryError = ErrorType<unknown>;

export function useGetInvitesSubscriberIdRankingCount<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
					TError,
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>
				>,
				"initialData"
			>;
	}
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInvitesSubscriberIdRankingCount<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
					TError,
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>
				>,
				"initialData"
			>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInvitesSubscriberIdRankingCount<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Acessar contagem de convites do link de convite.
 */

export function useGetInvitesSubscriberIdRankingCount<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingCount>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetInvitesSubscriberIdRankingCountQueryOptions(
		subscriberId,
		options
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Acessar posição do link de convite.
 * @summary Acessar posição do link de convite.
 */
export const getInvitesSubscriberIdRankingPosition = (
	subscriberId: string,
	signal?: AbortSignal
) => {
	return customInstance<GetInvitesSubscriberIdRankingPosition200>({
		url: `http://localhost:3333/invites/${subscriberId}/ranking/position`,
		method: "GET",
		signal,
	});
};

export const getGetInvitesSubscriberIdRankingPositionQueryKey = (
	subscriberId: string
) => {
	return [
		`http://localhost:3333/invites/${subscriberId}/ranking/position`,
	] as const;
};

export const getGetInvitesSubscriberIdRankingPositionQueryOptions = <
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getGetInvitesSubscriberIdRankingPositionQueryKey(subscriberId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>
	> = ({ signal }) =>
		getInvitesSubscriberIdRankingPosition(subscriberId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!subscriberId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInvitesSubscriberIdRankingPositionQueryResult = NonNullable<
	Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>
>;
export type GetInvitesSubscriberIdRankingPositionQueryError =
	ErrorType<unknown>;

export function useGetInvitesSubscriberIdRankingPosition<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
					TError,
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>
				>,
				"initialData"
			>;
	}
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInvitesSubscriberIdRankingPosition<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
					TError,
					Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>
				>,
				"initialData"
			>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInvitesSubscriberIdRankingPosition<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Acessar posição do link de convite.
 */

export function useGetInvitesSubscriberIdRankingPosition<
	TData = Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
	TError = ErrorType<unknown>,
>(
	subscriberId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getInvitesSubscriberIdRankingPosition>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetInvitesSubscriberIdRankingPositionQueryOptions(
		subscriberId,
		options
	);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Acessar link de convite.
 * @summary Acessar link de convite.
 */
export const getRanking = (signal?: AbortSignal) => {
	return customInstance<GetRanking200>({
		url: "http://localhost:3333/ranking",
		method: "GET",
		signal,
	});
};

export const getGetRankingQueryKey = () => {
	return ["http://localhost:3333/ranking"] as const;
};

export const getGetRankingQueryOptions = <
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetRankingQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getRanking>>> = ({
		signal,
	}) => getRanking(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getRanking>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRankingQueryResult = NonNullable<
	Awaited<ReturnType<typeof getRanking>>
>;
export type GetRankingQueryError = ErrorType<unknown>;

export function useGetRanking<
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = ErrorType<unknown>,
>(options: {
	query: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getRanking>>,
				TError,
				Awaited<ReturnType<typeof getRanking>>
			>,
			"initialData"
		>;
}): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRanking<
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getRanking>>,
				TError,
				Awaited<ReturnType<typeof getRanking>>
			>,
			"initialData"
		>;
}): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRanking<
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Acessar link de convite.
 */

export function useGetRanking<
	TData = Awaited<ReturnType<typeof getRanking>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getRanking>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetRankingQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
